---

# begin install
- name: Linux Bionic local webserver
  hosts: all
  become: yes
  tasks:

- name: Deploy development environment for xForge (languageforge.org and scriptureforge.org)
  hosts: all
  become: yes
  vars:
    config: developer
  vars_files:
    - "vars/config_{{config}}.yml"
  pre_tasks:
    - name: Add PHP{{php_version}} ppa
      apt_repository:
        repo: 'ppa:ondrej/php'
        state: present
    - name: add Mongo apt key
      apt_key:
        keyserver: hkp://keyserver.ubuntu.com:80
        id: 9DA31620334BD75D9DCB49F368818C72E52529D4
    - name: add Mongo {{mongodb_version}} repository
      apt_repository:
        repo: "deb [arch=amd64] http://repo.mongodb.org/apt/ubuntu {{base_distribution_release}}/mongodb-org/{{mongodb_version}} multiverse"
        filename: mongodb-org
        update_cache: yes
    - name: add nodejs apt-key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
    - name: add nodejs repo
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_10.x {{base_distribution_release}} main"
    - name: add sil apt-key
      apt_key:
        url: http://linux.lsdev.sil.org/downloads/sil-testing.gpg
    - name: add sil repo
      apt_repository:
        repo: deb http://linux.lsdev.sil.org/ubuntu {{base_distribution_release}} main
    - name: add sil experimental repo
      apt_repository:
        repo: deb http://linux.lsdev.sil.org/ubuntu {{base_distribution_release}}-experimental main
        update_cache: yes
  roles:
    - fix
    # locale_install may be needed if locale has been changed away from defaults
#    - locale_install
    - ssl_config
    - apache_config
  tasks:
    - name: install packages
      apt:
        name: "{{packages}}"
        state: present
        update_cache: yes
      vars:
        packages:
          - default-jre-headless
          - lfmerge
          - libapache2-mod-php
          - mongodb-org
          - nodejs
          - p7zip-full
          - php{{php_version}}-cli
          - php{{php_version}}-curl
          - php{{php_version}}-dev
          - php{{php_version}}-gd
          - php{{php_version}}-intl
          - php{{php_version}}-mbstring
          - php-pear
          - postfix
          - php-xdebug
          - unzip
      tags: [ 'packages' ]

    - name: check for node binary
      stat: path=/usr/local/bin/node
      register: node_binary
    - name: symlink node to nodejs
      file:
        src: /usr/bin/nodejs
        dest: /usr/local/bin/node
        state: link
      when: node_binary.stat.exists == False
    - name: install n
      shell: npm install -g n # TODO: idempotent
      args:
        creates: /usr/local/bin/n

    - name: change node version
      shell: "n {{node_version}}" # TODO: idempotent

    - name: change npm version
      shell: "npm install -g npm@{{npm_version}}" # TODO: idempotent

    - name: install Composer
      shell: php -r "readfile('https://getcomposer.org/installer');" | php -- --install-dir=/usr/local/bin --filename=composer
      args:
        creates: /usr/local/bin/composer

    - name: install gulp cli
      shell: npm install -g gulp-cli
      args:
        creates: /usr/local/bin/gulp

    - name: Add folders
      file:
        path: "{{item}}"
        state: directory
        group: www-data
        mode: u=rwX,g=rwX,o=rX
        recurse: yes
      with_items:
        - "{{php_log_folder}}"
    - name: Create a symbolic link for scriptureforge
      file:
        src: web-languageforge
        dest: ../../web-scriptureforge
        group: www-data
        state: link

    - name: php.ini changes
      lineinfile:
        dest: /etc/php/{{php_version}}/apache2/php.ini
        regexp: '^;?{{item.property}}'
        line: "{{item.property}} = {{item.value}}"
        backrefs: yes
      with_items:
        - property: 'memory_limit'
          value: '256M'
        - property: 'display_errors'
          value: 'On'
        - property: 'display_startup_errors'
          value: 'On'
        - property: 'error_log'
          value: '{{php_log_folder}}/php_error.log'
        - property: 'post_max_size'
          value: '60M'
        - property: 'upload_max_filesize'
          value: '60M'
    - name: copy apache2 service config from /lib to /etc for modification
      copy:
        src: /lib/systemd/system/apache2.service
        dest: /etc/systemd/system/apache2.service
        owner: root
        group: root
        mode: 0644
    - name: disable systemd /tmp isolation for apache2
      lineinfile:
        dest: /etc/systemd/system/apache2.service
        regexp: '^#?PrivateTmp=true'
        line: "PrivateTmp=false"
    - name: configure xdebug.ini
      blockinfile:
        path: /etc/php/{{php_version}}/mods-available/xdebug.ini
        block: |

          [XDebug]
          xdebug.remote_enable=1
          xdebug.remote_autostart=1

      notify: Restart apache

    - name: postfix | halt emails in output queue
      when: inventory_hostname == "localhost"
      lineinfile:
        dest: /etc/postfix/main.cf
        state: present
        create: yes
        regexp: '^#?{{item.property}}'
        line: "{{item.property}} = {{item.value}}"
      with_items:
        - property: 'default_transport'
          value: 'retry:no outbound email allowed'
      notify: restart postfix

    # This stanza ensures that the /var/www/default_local links to wherever your source actually is.
    - name: "Ensure Source Link: default_local folder does not exist (localhost)"
      file: path="/var/www/default_local" state=absent force=true
      when: inventory_hostname == "localhost"
    - name: "Ensure Source Link: Get current location of the source code (localhost)"
      local_action: shell pwd
      register: local_dir
      when: inventory_hostname == "localhost"
    - name: "Ensure Source Link: default_local link exists (localhost)"
      file: src="{{local_dir.stdout | dirname | dirname | realpath}}" dest="/var/www/default_local" state=link group=www-data force=true
      when: inventory_hostname == "localhost"

     # group permissions from LfMerge deploy
    - name: ensure www-data group exists
      group: name=www-data

    - name: ensure fieldworks group exists
      group: name=fieldworks

    - name: make www-data user a member of fieldworks group
      user:
        name: www-data
        group: www-data
        home: /var/www
        shell: /usr/sbin/nologin
        groups: fieldworks
        append: yes

    - name: make "{{ lookup('env','USER') }}" a member of fieldworks group
      user:
        name: "{{ lookup('env','USER') }}"
        groups: fieldworks
        append: yes

      # Could look up home dir of www-data user on remote system, but that turns out to
      # be a bit complicated. And since we just set it to /var/www, just use that.
    - name: ensure www-data has setguid, group-writeable .local folder
      # mode 02775 is u+rwx, g+rwx, o+rx plus the setgid bit (octal 02000)
      file:
        path: /var/www/.local
        state: directory
        mode: 02775
        owner: www-data
        group: fieldworks

    - name: Ensure folder permissions
      # see http://stackoverflow.com/questions/28778738/ansible-mode-755-for-directories-and-644-for-files-recursively
      file:
        path: "{{item.path}}"
        state: directory
        mode: "{{item.mode}}"
        recurse: yes
      with_items:
        - path: "{{lf_path}}/src"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{sf_path}}/src"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{lf_path}}/test"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{sf_path}}/test"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{lf_path}}/docs"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{sf_path}}/docs"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{lf_path}}/src/assets/lexicon"
          mode: 'g+w'
        - path: "{{sf_path}}/src/assets/lexicon"
          mode: 'g+w'

    - name: Ensure www-data has permission to folders
      # see http://stackoverflow.com/questions/28778738/ansible-mode-755-for-directories-and-644-for-files-recursively
      file:
        path: "{{item.path}}"
        state: directory
        group: www-data
        mode: "{{item.mode}}"
        recurse: yes
      with_items:
        - path: "{{lf_path}}/src/assets"
          mode: 'u=rwX,g=rwX'
        - path: "{{sf_path}}/src/assets"
          mode: 'u=rwX,g=rwX'
        - path: "{{lf_path}}/src/cache"
          mode: 'u=rwX,g=rwX'
        - path: "{{sf_path}}/src/cache"
          mode: 'u=rwX,g=rwX'

    - name: Ensure /var/lib/languageforge directory is writeable (for LfMerge)
      file:
        path: /var/lib/languageforge
        state: directory
        owner: www-data
        group: www-data
        mode: 0755
    - name: Ensure /var/www/.local directory is writeable (for LfMerge)
      file:
        path: /var/www/.local
        state: directory
        owner: www-data
        group: www-data
        mode: 0755

    - name: Install PECL Mongo Extension
      pear:
        name: pecl/mongodb
        state: present
    - name: Enable PECL Mongo module in mods-available
      lineinfile:
        dest: /etc/php/{{php_version}}/mods-available/mongodb.ini
        regexp: 'mongodb.so'
        line: 'extension=mongodb.so'
        state: present
        create: yes
        mode: u=rw,g=r,o=r
    - name: Enable PECL Mongo module
      shell: phpenmod mongodb
      args:
        creates: /etc/php/{{php_version}}/apache2/conf.d/20-mongodb.ini
      notify: Restart apache

    - name: Set Apache umask to 002
      lineinfile:
        dest: /etc/apache2/envvars
        regexp: '^umask \d+'
        line: 'umask 002'
        backrefs: no
      notify: Restart apache

    - name: ensure mongo_path is owned by mongodb:mongodb
      file:
        dest: '{{mongo_path}}'
        owner: mongodb
        group: mongodb

    - name: update the mongo config file
      lineinfile:
        dest: /etc/mongod.conf
        regexp: '^(\s*dbPath: ).*$'
        line: '\1{{mongo_path}}'
        backrefs: yes
      notify: restart mongod
    - name: ensure mongod service is running (and enable it at boot)
      # Note that the mongodb-org packages install a service named "mongod", not "mongodb"
      service:
        name: mongod
        state: started
        enabled: yes

    - name: add localhost to dnsmasq
      lineinfile:
        dest: /etc/NetworkManager/dnsmasq.d/localhost-domain
        line: "{{item}}"
        state: present
        create: yes
        mode: 'u=rw,g=r,o=r'
      with_items:
        - "address=/localhost/127.0.0.1"
        - "address=/localhost/::1"
      when: inventory_hostname == "localhost"
      notify: restart network
      tags: [ 'network' ]

    - name: add host aliases
      lineinfile:
        dest: /etc/hosts
        regexp: '\s{{item}}'
        line: "127.0.0.1    {{item}}"
        state: present
        create: yes
      with_items:
        - "default.local"
        - "languageforge.local"
        - "scriptureforge.local"
      when: inventory_hostname == "localhost"

  handlers:
    - name: restart mongod
      service: name=mongod state=restarted

    - name: restart network
      service: name=network-manager state=restarted

    - name: restart postfix
      service: name=postfix state=restarted

- import_playbook: code.yml
  vars:
    lf_path: /var/www/default_local/web-languageforge
    site_src_paths:
      - /var/www/default_local/web-languageforge/src

- name: refresh dependencies
  hosts: all
  tasks:
    - name: run refreshDeps.sh
      shell: ./refreshDeps.sh
      args:
        chdir: ..
