---

- name: Deploy development environment for xForge (languageforge.org and scriptureforge.org)
  hosts: all
  become: yes
  pre_tasks:
    - include_vars: "vars_{{ deploy }}.yml"
    - name: add Mongo apt key
      apt_key:
        keyserver: hkp://keyserver.ubuntu.com:80
        id: 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
    - name: add Mongo 3.6 repository
      # TODO: use ansible system variable instead of hardcoding "xenial" in repo line -- except that it can only be from a restricted list of distros (e.g. xenial & bionic only)
      apt_repository:
        repo: "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse"
        filename: mongodb-org-3.6
        update_cache: yes
  roles:
    - fix
    - ssl_config
    - apache_config
  tasks:
    - name: install packages
      apt: name="{{item}}" state=present
      with_items:
        - libapache2-mod-php
        - mongodb-org
        - p7zip-full
        - php7.0-cli
        - php7.0-dev
        - php7.0-gd
        - php7.0-intl
        - php7.0-mbstring
        - php-pear
        - php-xdebug
        - postfix
        - unzip
        - chromium-browser

    - name: check for node binary
      stat: path=/usr/local/bin/node
      register: node_binary

    - name: symlink node to nodejs
      file: src=/usr/bin/nodejs dest=/usr/local/bin/node state=link
      when: node_binary.stat.exists == False

    - name: install Composer
      shell: php -r "readfile('https://getcomposer.org/installer');" | php -- --install-dir=/usr/local/bin --filename=composer
      args:
        creates: /usr/local/bin/composer

    - name: install gulp cli
      shell: npm install -g gulp-cli
      args:
        creates: /usr/local/bin/gulp

    - name: install JSCS
      shell: npm install -g jscs
      args:
        creates: /usr/local/bin/jscs
      when: inventory_hostname == "localhost"

    - name: php log folder exists
      file: path={{php_log_folder}} state=directory owner=www-data group=www-data mode=0775 recurse=yes

    - name: php.ini changes
      lineinfile:
        dest: /etc/php/7.0/apache2/php.ini
        regexp: '^;?{{item.property}}'
        line: "{{item.property}} = {{item.value}}"
        backrefs: yes
      with_items:
        - property: 'memory_limit'
          value: '256M'
        - property: 'display_errors'
          value: 'On'
        - property: 'display_startup_errors'
          value: 'On'
        - property: 'error_log'
          value: '{{php_log_folder}}/php_error.log'
        - property: 'post_max_size'
          value: '60M'
        - property: 'upload_max_filesize'
          value: '60M'
      notify: Restart apache

    - name: postfix | halt emails in output queue
      when: inventory_hostname == "localhost"
      lineinfile:
        dest: /etc/postfix/main.cf
        state: present
        create: yes
        regexp: '^#?{{item.property}}'
        line: "{{item.property}} = {{item.value}}"
      with_items:
        - property: 'default_transport'
          value: 'retry:no outbound email allowed'
      notify: restart postfix

    # This stanza ensures that the /var/www/virtual/default_local links to wherever your source actually is.
    - name: "Ensure Source Link: default_local folder does not exist (localhost)"
      file: path="/var/www/virtual/default_local" state=absent force=true
      when: inventory_hostname == "localhost"
    - name: "Ensure Source Link: Get current location of the source code (localhost)"
      local_action: shell pwd
      register: local_dir
      when: inventory_hostname == "localhost"
    - name: "Ensure Source Link: default_local link exists (localhost)"
      file: src="{{local_dir.stdout | dirname | dirname | realpath}}" dest="/var/www/virtual/default_local" state=link group=www-data force=true
      when: inventory_hostname == "localhost"

    - apt_key: url=http://linux.lsdev.sil.org/downloads/sil-testing.gpg state=present

    - apt_repository: repo='deb http://linux.lsdev.sil.org/ubuntu {{ansible_distribution_release}} main' state=present
      when: ansible_distribution == 'Ubuntu'
    - apt_repository: repo='deb http://linux.lsdev.sil.org/ubuntu {{ansible_distribution_release}}-experimental main' state=present update_cache='yes'
      when: ansible_distribution == 'Ubuntu'

    - name: install LfMerge package
      apt: name="{{item}}" state=present
      with_items:
        - lfmerge

     # group permissions from LfMerge deploy
    - name: ensure www-data group exists
      become: yes
      group: name=www-data state=present

    - name: make www-data user a member of fieldworks group
      become: yes
      user: name=www-data state=present group=www-data home=/var/www shell=/usr/sbin/nologin groups=fieldworks append=yes

      # Could look up home dir of www-data user on remote system, but that turns out to
      # be a bit complicated. And since we just set it to /var/www, just use that.
    - name: ensure www-data has setguid, group-writeable .local folder
      become: yes
      # mode 02775 is u+rwx, g+rwx, o+rx plus the setgid bit (octal 02000)
      file: path=/var/www/.local state=directory mode=02775 owner=www-data group=fieldworks

    - name: Ensure folder permissions
      # see http://stackoverflow.com/questions/28778738/ansible-mode-755-for-directories-and-644-for-files-recursively
      file:
        path: "{{item.path}}"
        state: directory
        mode: "{{item.mode}}"
        recurse: yes
      with_items:
        - path: "{{lf_path}}/src"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{sf_path}}/src"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{lf_path}}/test"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{sf_path}}/test"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{lf_path}}/docs"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{sf_path}}/docs"
          mode: 'u=rwX,g=rX,o=rX'

    - name: Ensure www-data has permission to folders
      # see http://stackoverflow.com/questions/28778738/ansible-mode-755-for-directories-and-644-for-files-recursively
      file:
        path: "{{item.path}}"
        state: directory
        group: www-data
        mode: "{{item.mode}}"
        recurse: yes
      with_items:
        - path: "{{lf_path}}/src/assets"
          mode: 'u=rwX,g=rwXs'
        - path: "{{sf_path}}/src/assets"
          mode: 'u=rwX,g=rwXs'
        - path: "{{lf_path}}/src/cache"
          mode: 'u=rwX,g=rwXs'
        - path: "{{sf_path}}/src/cache"
          mode: 'u=rwX,g=rwXs'

    - name: Ensure /var/lib/languageforge directory is writeable (for LfMerge)
      file: path="/var/lib/languageforge" state=directory owner=www-data group=www-data mode=0755
    - name: Ensure /var/www/.local directory is writeable (for LfMerge)
      file: path="/var/www/.local" state=directory owner=www-data group=www-data mode=0755

    - name: install PECL mongo extension
      # yes types empty line over and over to accept defaults
      shell: yes '' | /usr/bin/pecl install mongodb
      register: pecl_result
      changed_when: "pecl_result.rc == 0"
      failed_when: "not (('already installed' in pecl_result.stdout) or ('install ok:' in pecl_result.stdout))"
    - name: install PECL mongo extension | enable module in mods-available
      lineinfile:
        dest: /etc/php/7.0/mods-available/mongodb.ini
        regexp: 'mongodb.so'
        line: 'extension=mongodb.so'
        state: present
        create: yes
        mode: 0644
    - name: install PECL mongo extension | ensure conf.d exists
      file: path=/etc/php/7.0/cli/conf.d state=directory mode=0755
    - name: install PECL mongo extension | add mods-available in cli/conf.d
      file: src=/etc/php/7.0/mods-available/mongodb.ini dest=/etc/php/7.0/cli/conf.d/20-mongodb.ini state=link
      notify: Restart apache
    - name: install PECL mongo extension | add mods-available in apache2/conf.d
      file: src=/etc/php/7.0/mods-available/mongodb.ini dest=/etc/php/7.0/apache2/conf.d/20-mongodb.ini state=link
      notify: Restart apache

    - name: Set Apache umask to 002
      lineinfile:
        dest: /etc/apache2/envvars
        regexp: '^umask \d+'
        line: 'umask 002'
        backrefs: no
      notify: Restart apache

    - name: update the mongo config file
      lineinfile:
        dest: /etc/mongod.conf
        regexp: '^(\s*dbPath: ).*$'
        line: '\1{{mongo_path}}'
        backrefs: yes
      notify: restart mongodb
    - name: ensure mongod service is running (and enable it at boot)
      # Note that the mongodb-org packages install a service named "mongod", not "mongodb"
      service:
        name: "{{item.name}}"
        state: "{{item.state}}"
        enabled: "{{item.enabled}}"
      with_items:
        - name: mongod
          state: stopped
          enabled: no
        - name: mongod
          state: started
          enabled: yes

    - name: add host aliases
      lineinfile:
        dest: /etc/hosts
        regexp: '\s{{item}}'
        line: "127.0.0.1    {{item}}"
        state: present
        create: yes
      with_items:
        - "default.local"
        - "languageforge.local"
        - "scriptureforge.local"
        - "jamaicanpsalms.scriptureforge.local"
        - "demo.scriptureforge.local"
      when: inventory_hostname == "localhost"

    # node_modules are not a dependency for the product, rather it is a dependency
    # for the developer to run the build tools, gulp, e2e, and so on.
    # This does not install well across an NTFS share, so is not included
    # here. CP 2016-11
    #- name: install npm dependencies
    #  become: no
    #  shell: npm install
    #  args:
    #    chdir: "{{lf_path}}"
    #    creates: "{{lf_path}}/node_modules/"

  handlers:
    - name: restart mongodb
      service: name=mongod state=restarted

    - name: restart postfix
      service: name=postfix state=restarted
