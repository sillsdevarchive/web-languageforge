# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

$script = <<SCRIPT
if [ ! -d "/home/vagrant/src" ]; then
  mkdir /home/vagrant/src
fi
if [ ! -d "/home/vagrant/src/web-languageforge" ]; then
  git clone https://github.com/sil-student-projects/web-languageforge.git /home/vagrant/src/web-languageforge --recursive
else
  cd /home/vagrant/src/web-languageforge; git pull --ff-only --recurse-submodules origin
fi
if [ ! -d "/home/vagrant/src/web-scriptureforge" ]; then
  git clone https://github.com/sil-student-projects/web-scriptureforge.git /home/vagrant/src/web-scriptureforge --recursive
else
  cd /home/vagrant/src/web-scriptureforge; git pull --ff-only --recurse-submodules origin
fi
cd /home/vagrant/src/web-languageforge/deploy/; git checkout master-sbu; ansible-playbook -i hosts playbook_lxde.yml
SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "trusty-webdev-amd64"

  config.vm.box_url = "http://downloads.sil.org/vagrant/trusty-webdev-amd64.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
    # Don't boot with headless mode
    vb.gui = true
  
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "1024"]
    vb.customize ["modifyvm", :id, "--vram", 64]
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
  end

  # configure Vagrant's ssh shell to be a non-login one (avoids error "stdin: is not a tty error")
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  config.vm.provision "shell", inline: $script
  
  #config.vm.provision :ansible do |ansible|
  #  ansible.playbook = '../playbook_lxde.yml'
  #  ansible.extra_vars = { ansible_ssh_user: 'vagrant', vagrant: true }
  # 
  #  ansible.verbose = 'v'
  #end
end
