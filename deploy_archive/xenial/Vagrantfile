# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

$script = <<SCRIPT

set -eux

apt-get update
apt-get -y install software-properties-common python-software-properties apt-transport-https
add-apt-repository ppa:ansible/ansible
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 # TODO move this to Ansible
apt-get update
apt-get -y install git ansible

echo Install NodeJS 8.X and latest npm
wget -O- https://deb.nodesource.com/setup_8.x | sudo -E bash -
apt-get install -y nodejs

# Runs the rest of the script as vagrant
sudo -i -u vagrant bash << VAGRANT_USER

set -eux

cd ~/src
if [ ! -d "web-languageforge" ]; then
  git clone --depth 1 --recurse-submodules https://github.com/sillsdev/web-languageforge.git
else
  cd web-languageforge
  git pull --ff-only --recurse-submodules
fi

cd ~/src
[ -d web-scriptureforge ] || ln -s web-languageforge web-scriptureforge

cd ~/src/web-languageforge/deploy/
git checkout master

echo '***You may be asked for a password. The password is vagrant***'

ansible-playbook -i hosts playbook_create_config.yml --limit localhost
chown vagrant.vagrant ansible.cfg # TODO: what is this here for?
ansible-playbook -i hosts playbook_xenial_server_vagrant.yml --limit localhost

cd ~/src/web-languageforge
git fetch --unshallow || true # This will fail if run on a complete repo

VAGRANT_USER

SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "kaorimatz/ubuntu-16.04-amd64"
  # Less secure but will work on NTFS which doesn't understand permissions / owner very well
  config.ssh.insert_key = false

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "kaorimatz/ubuntu-16.04-amd64"

  config.vm.define "xenial_server"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder ".", "/home/vagrant/src",
    id: "vagrant-root",
    owner: "vagrant",
    group: "www-data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "2048"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "off"]

    # Allows symlinks in the synced folder (disabled by default because of security issues that don't apply to us)
    # See https://github.com/hashicorp/vagrant/issues/713
    vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/vagrant-root", "1"]
  end

  # configure Vagrant's ssh shell to be a non-login one (avoids error "stdin: is not a tty error")
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"
  config.vm.provision "shell", inline: $script

#  config.vm.provision :ansible do |ansible|
#    ansible.playbook = '../playbook_debian.yml'
#    ansible.extra_vars = { ansible_ssh_user: 'vagrant', vagrant: true }
#    ansible.verbose = 'v'
#  end

end
